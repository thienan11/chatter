[{"/Users/thienantran/Downloads/Projects/superchatter/src/index.js":"1","/Users/thienantran/Downloads/Projects/superchatter/src/App.js":"2","/Users/thienantran/Downloads/Projects/superchatter/src/reportWebVitals.js":"3","/Users/thienantran/Downloads/chatter/src/index.js":"4","/Users/thienantran/Downloads/chatter/src/reportWebVitals.js":"5","/Users/thienantran/Downloads/chatter/src/App.js":"6"},{"size":535,"mtime":1693366276047,"results":"7","hashOfConfig":"8"},{"size":3602,"mtime":1693517516195,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1693366276048,"results":"10","hashOfConfig":"8"},{"size":535,"mtime":1693366276047,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1693366276048,"results":"13","hashOfConfig":"12"},{"size":4293,"mtime":1693812828501,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1hseux6",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xolgbp",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/Users/thienantran/Downloads/Projects/superchatter/src/index.js",[],[],[],"/Users/thienantran/Downloads/Projects/superchatter/src/App.js",["35"],[],"/Users/thienantran/Downloads/Projects/superchatter/src/reportWebVitals.js",[],[],"/Users/thienantran/Downloads/chatter/src/index.js",[],[],"/Users/thienantran/Downloads/chatter/src/reportWebVitals.js",[],[],"/Users/thienantran/Downloads/chatter/src/App.js",["36","37","38"],[],"import React, {useRef, useState} from 'react';\nimport './App.css';\n\n// firebase sdk\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\n\n// hooks\nimport {useAuthState} from 'react-firebase-hooks/auth';\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\nimport { findAllInRenderedTree } from 'react-dom/test-utils';\n\nimport logo from './images/bird (1).png'\n\n// identify project\nfirebase.initializeApp({\n  // config\n  apiKey: \"AIzaSyBuc9CrDPXhGevsGO5Jm6S68Hxa30d0nNk\",\n  authDomain: \"superchatter-acb0a.firebaseapp.com\",\n  projectId: \"superchatter-acb0a\",\n  storageBucket: \"superchatter-acb0a.appspot.com\",\n  messagingSenderId: \"723565069036\",\n  appId: \"1:723565069036:web:f6b4afa06d651b09c1dbc9\",\n  measurementId: \"G-M4H0FQRGWC\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\nconst numUsrs = firestore.collection('messages');\n\nfunction App() {\n\n  const[user] = useAuthState(auth); // signed in, user is an object) | signed out, user is null\n\n  // use ternary operator to check if a user is signed in or not\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <h1>Chatter</h1>\n          <img src={logo} alt=\"chatter icon\"/>\n        </div>\n\n        <div className='right-header'>\n          <SignOut/>\n        </div>\n\n      </header>\n      \n      <section>\n        {user ? <Chat /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <button onClick={signInWithGoogle} className='sign-in'>Sign in with Google</button>\n  )\n}\n\nfunction SignOut() {\n  // check for current user, and return a button to sign out\n  return auth.currentUser && (\n    <button onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\nfunction Chat(){\n  \n  const dummy = useRef();\n\n  // reference a firestore collection (in this case, messages)\n  const messageRef = firestore.collection('messages');\n  // query documents in the messages collection\n  const query = messageRef.orderBy('created').limit(25);\n\n  // listen to data with a hook in real time\n  const[messages] = useCollectionData(query, {idField: 'id'});\n\n  const[formValue, setFormValue] = useState('');\n\n  const n = auth.currentUser.displayName;\n\n  const sendMsg = async(e) => {\n    // prevent page refresh\n    e.preventDefault();\n    // get user id from current logged in user\n    const {uid, photoURL} = auth.currentUser;\n\n    // create new document in database\n    await messageRef.add({\n      text: formValue,\n      // created: firebase.firestore.FieldValue.serverTimestamp(),\n      created: firebase.firestore.Timestamp.fromDate(new Date()),\n      uid,\n      photoURL,\n      n\n    });\n\n    // after, set form value back to empty string\n    setFormValue('');\n\n    // scroll into view whenever a user sends a message\n    dummy.current.scrollIntoView({behavior: 'smooth'});\n  }\n\n  return (\n    <>\n      <main>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n      \n        <span ref={dummy}></span>\n\n      </main>\n    \n      <form onSubmit={sendMsg}>\n        {/* bind state to form input */}\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"Send a message\" />\n        \n        <button type=\"submit\">ðŸ’¬</button>\n\n      </form>\n    </>\n  )\n}\n\nfunction ChatMessage(props) {\n  // find chat message child component, show actual text\n  const {text, uid, photoURL, n, created} = props.message;\n  const ts = (created.seconds + created.nanoseconds/1000000000) * 1000;\n  const d = new Date(ts).toLocaleTimeString();\n\n  // distinguish between messages that were sent and received\n  // compare user id on firestore document and currently logged in user, if equal, current user sent them\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n  const tagClass = uid === auth.currentUser.uid ? 'sentN' : 'receivedN';\n\n  return (\n    <>\n    <div className={`name ${tagClass}`}>\n      <p>{n} | {d}</p>\n    </div>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL}/>\n      <p>{text}</p>\n    </div>\n    </>\n  )\n}\n\nexport default App;\n",{"ruleId":"39","severity":1,"message":"40","line":133,"column":7,"nodeType":"41","endLine":133,"endColumn":28},{"ruleId":"42","severity":1,"message":"43","line":12,"column":10,"nodeType":"44","messageId":"45","endLine":12,"endColumn":31},{"ruleId":"42","severity":1,"message":"46","line":30,"column":7,"nodeType":"44","messageId":"45","endLine":30,"endColumn":14},{"ruleId":"39","severity":1,"message":"40","line":153,"column":7,"nodeType":"41","endLine":153,"endColumn":28},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'findAllInRenderedTree' is defined but never used.","Identifier","unusedVar","'numUsrs' is assigned a value but never used."]